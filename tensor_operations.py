import torch

initial_tensor = torch.rand(2, 3)
# method ending with _ performs the operation on the object
initial_tensor.fill_(10)
# method not ending with _ performs the operation on the returned object
new_tensor = initial_tensor.add(5)
print(new_tensor)
new_tensor.add_(5)
print(new_tensor)
new_tensor.sqrt_()
print(new_tensor)
x = torch.linspace(start=0.1, end=10.0, steps=15)
print(x)
tensor_chunk = torch.chunk(x, 3, 0)
print(tensor_chunk)
tensor_cat = torch.cat((tensor_chunk[0], tensor_chunk[1], torch.tensor([3.0, 4.0, 5.0])), 0)
print(tensor_cat)
random_tensor = torch.Tensor([[10, 8, 30], [40, 5, 6], [12, 2, 21]])
print(random_tensor[0, 1])
print(random_tensor[1:, 1:])
print(random_tensor.size())
# view does not create a new tensor, just a different view on the same tensor
resized_tensor = random_tensor.view(9)
print(resized_tensor)
tensor_unsqueeze = torch.unsqueeze(random_tensor, 2)
print(tensor_unsqueeze)
tensor_transpose = torch.transpose(initial_tensor, 0, 1)
print(tensor_transpose)
sorted_tensor, sorted_indices = torch.sort(random_tensor)
print(sorted_tensor)
print(sorted_indices)
tensor_float = torch.FloatTensor([-1.1, -2.2, 3.3])
tensor_abs = torch.abs(tensor_float)
print(tensor_abs)
rand1 = torch.abs(torch.rand(2, 3))
rand2 = torch.abs(torch.rand(2, 3))
add1 = rand1 + rand2
print(add1)
add2 = torch.add(rand1, rand2)
print(add2)
tensor_div = torch.div(rand1, rand2)
print(tensor_div)
tensor_mul = torch.mul(rand1, rand2)
print(tensor_div)
tensor_clamp = torch.clamp(rand1, min=-0.2, max = 2)
print(tensor_clamp)
t1 = torch.Tensor([1, 2])
t2 = torch.Tensor([10, 20])
dot_product = torch.dot(t1, t2)
print(dot_product)
matrix = torch.Tensor([[1, 2, 3], [4, 5, 6]])
vector = torch.Tensor([0, 1, 2])
matrix_vector = torch.mv(matrix, vector)
print(matrix_vector)
another_matrix = torch.Tensor([[10, 30], [20, 0], [0, 50]])
print(another_matrix)
matrix_mul = torch.mm(matrix, another_matrix)
print(matrix_mul)
print(torch.argmax(matrix_mul, dim=1))
print(torch.argmin(matrix_mul, dim=1))